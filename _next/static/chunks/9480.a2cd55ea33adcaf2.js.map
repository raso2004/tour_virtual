{"version":3,"file":"static/chunks/9480.a2cd55ea33adcaf2.js","mappings":"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","sources":["webpack://_N_E/./containers/Home/components/Tour.RenderSceneFlat360/Action.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { useCallback, useRef, memo, useEffect } from 'react';\nimport { I_Scene } from '@containers/Home/types';\nimport { selectConfigAutoRotate } from '@containers/Home/selectors';\nimport { useSelector } from 'react-redux';\nimport type { I_ViewerState } from '.';\n\ninterface Props {\n  scene: I_Scene;\n  viewerState: I_ViewerState;\n  setViewerState: any;\n  totalFrames: number;\n}\n\nconst Action = memo(\n  ({ scene, viewerState, setViewerState, totalFrames }: Props) => {\n    const animationRef = useRef(null);\n    const autorotateIntervalRef = useRef(null);\n    const autorotateTimeoutRef = useRef(null);\n\n    const configAutoRotate = useSelector(selectConfigAutoRotate);\n\n    const animateToFrame = useCallback(\n      (targetFrame: number) => {\n        if (viewerState.isAnimating || viewerState.isLoading) return;\n        // if (autorotateIntervalRef.current)\n        //   clearInterval(autorotateIntervalRef.current);\n        setViewerState(prev => ({ ...prev, isAnimating: true }));\n\n        const startFrame = viewerState.currentFrame;\n        const frameDistance = targetFrame - startFrame;\n        // Calculate the shortest path (clockwise or counterclockwise)\n        let adjustedFrameDistance = frameDistance;\n        if (Math.abs(frameDistance) > totalFrames / 2) {\n          // If the distance is greater than half the total frames, go the other way\n          adjustedFrameDistance =\n            frameDistance > 0\n              ? frameDistance - totalFrames\n              : frameDistance + totalFrames;\n        }\n\n        const direction = adjustedFrameDistance > 0 ? 1 : -1;\n        const totalSteps = Math.abs(adjustedFrameDistance);\n        let currentStep = 0;\n\n        const animationSpeed = 30; // ms per frame\n\n        const performStep = () => {\n          if (currentStep >= totalSteps) {\n            setViewerState(prev => ({\n              ...prev,\n              currentFrame: targetFrame,\n              isAnimating: false,\n            }));\n            if (animationRef.current) clearTimeout(animationRef.current);\n            return;\n          }\n\n          currentStep++;\n          setViewerState(prev => {\n            let newFrame = prev.currentFrame + direction;\n            if (newFrame > totalFrames) newFrame = 1;\n            if (newFrame < 1) newFrame = totalFrames;\n\n            return { ...prev, currentFrame: newFrame };\n          });\n\n          animationRef.current = setTimeout(performStep, animationSpeed);\n        };\n        performStep();\n      },\n      [\n        totalFrames,\n        setViewerState,\n        viewerState.isLoading,\n        viewerState.isAnimating,\n        viewerState.currentFrame,\n      ],\n    );\n\n    // Navigate to next/previous preset position\n    const navigatePosition = useCallback(\n      direction => {\n        if (\n          !scene?.object360?.presets.length ||\n          viewerState.isAnimating ||\n          viewerState.isLoading\n        )\n          return;\n        const currentFrame = viewerState.currentFrame;\n        const nearestPreset =\n          (direction === -1\n            ? scene.object360.presets.slice().reverse()\n            : scene.object360.presets\n          ).find(preset =>\n            direction === 1\n              ? preset.frame > currentFrame || preset.frame === currentFrame\n              : preset.frame < currentFrame || preset.frame === currentFrame,\n          ) || scene.object360.presets[0];\n\n        const index = scene.object360.presets.indexOf(nearestPreset);\n        const nextPreset =\n          currentFrame === nearestPreset.frame\n            ? scene.object360.presets[\n                ((index || scene.object360.presets.length) + direction) %\n                  scene.object360.presets.length\n              ]\n            : nearestPreset;\n        animateToFrame(nextPreset.frame);\n      },\n      [\n        animateToFrame,\n        scene.object360.presets,\n        viewerState.currentFrame,\n        viewerState.isAnimating,\n        viewerState.isLoading,\n      ],\n    );\n\n    // Handle autorotation\n    useEffect(() => {\n      if (\n        configAutoRotate.on &&\n        configAutoRotate.enabled &&\n        !viewerState.isDragging &&\n        !viewerState.isLoading &&\n        !viewerState.isAnimating\n      ) {\n        autorotateTimeoutRef.current = setTimeout(() => {\n          autorotateIntervalRef.current = setInterval(\n            () => {\n              setViewerState(prev => {\n                return {\n                  ...prev,\n                  currentFrame: (prev.currentFrame % totalFrames) + 1,\n                };\n              });\n            },\n            (configAutoRotate.speed / 2) * 1000,\n          );\n        }, configAutoRotate.waitTime * 1000);\n      } else if (autorotateIntervalRef.current) {\n        clearInterval(autorotateIntervalRef.current);\n        clearTimeout(autorotateTimeoutRef.current);\n      }\n\n      return () => {\n        if (autorotateIntervalRef.current)\n          clearInterval(autorotateIntervalRef.current);\n        if (autorotateTimeoutRef.current)\n          clearTimeout(autorotateTimeoutRef.current);\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n      configAutoRotate,\n      viewerState.isLoading,\n      viewerState.isDragging,\n      viewerState.isAnimating,\n    ]);\n\n    return (\n      <>\n        {scene?.object360?.presets?.length && (\n          <>\n            <button\n              className=\"--navigation-button --navigation-button-left\"\n              onClick={() => navigatePosition(-1)}\n              disabled={viewerState.isAnimating || viewerState.isLoading}\n            >\n              ◀\n            </button>\n            <button\n              className=\"--navigation-button --navigation-button-right\"\n              onClick={() => navigatePosition(1)}\n              disabled={viewerState.isAnimating || viewerState.isLoading}\n            >\n              ▶\n            </button>\n          </>\n        )}\n      </>\n    );\n  },\n);\n\nexport default Action;\n"],"names":["Action","memo","param","scene","viewerState","setViewerState","totalFrames","animationRef","useRef","autorotateIntervalRef","autorotateTimeoutRef","configAutoRotate","useSelector","selectConfigAutoRotate","animateToFrame","useCallback","targetFrame","isAnimating","isLoading","prev","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_4__","_","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_5__","frameDistance","currentFrame","adjustedFrameDistance","Math","abs","direction","totalSteps","currentStep","performStep","current","clearTimeout","newFrame","setTimeout","navigatePosition","object360","presets","length","nearestPreset","slice","reverse","find","preset","frame","index","indexOf","nextPreset","useEffect","on","enabled","isDragging","clearInterval","setInterval","speed","waitTime","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Fragment","jsxs","button","className","onClick","disabled","__webpack_exports__"],"sourceRoot":""}